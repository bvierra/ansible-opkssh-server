---
###
# Create the linux user and group for opkssh
###
- name: "Ensure that the opkssh {{ opkssh_auth_cmd_group }} exists"
  ansible.builtin.group:
    name: "{{ opkssh_auth_cmd_group }}"
    state: present
    system: yes

- name: "Ensure that the {{ opkssh_auth_cmd_user }} user exists"
  ansible.builtin.user:
    name: "{{ opkssh_auth_cmd_user }}"
    state: present
    shell: /sbin/nologin
    home: /etc/opk
    groups: "{{ opkssh_auth_cmd_group }}"
    append: yes
    createhome: no
    system: yes

###
# Check if the opkssh binary exists and delete it if it is the incorrect version
###
- name: Remove existing opkssh binary if it exists and is the incorrect version
  block:
    - name: Check if opkssh binary exists
      ansible.builtin.stat:
        path: "{{ opkssh_cmd }}"
        get_mime: false
        get_checksum: false
      register: opkssh_cmd_exists

    - name: Get current opkssh version
      ansible.builtin.command: "{{ opkssh_cmd }} --version"
      changed_when: false
      check_mode: false
      register: opkssh_cmd_version
      when: 
        - opkssh_cmd_exists.stat.exists

    - name: Set opkssh_cmd_version
      ansible.builtin.set_fact:
        opkssh_cmd_version: "{{ opkssh_cmd_version.stdout }}"
      when:
        - opkssh_cmd_exists.stat.exists
        - opkssh_cmd_version is defined 

    - name: Delete old opkssh binary if version is different
      ansible.builtin.file:
        path: "{{ opkssh_cmd }}"
        state: absent
      when: 
        - opkssh_cmd_exists.stat.exists
        - opkssh_cmd_version != opkssh_version
    
    - name: Set opkssh_cmd_reinstall to true if version installed is different than requested
      ansible.builtin.set_fact:
        opkssh_cmd_reinstall: true
      when: 
        - opkssh_cmd_exists.stat.exists
        - opkssh_cmd_version != opkssh_version

- name: Download and install opkssh binary
  when: >
   opkssh_cmd_exists.stat is not defined or 
   opkssh_cmd_exists.stat.exists is false or 
   (opkssh_cmd_reinstall is defined and opkssh_cmd_reinstall)
  block: 
    - name: Download opkssh binary
      ansible.builtin.get_url:
        url: "{{ opkssh_cmd_download_url }}"
        dest: "{{ opkssh_cmd }}"
        owner: root
        group: "{{ opkssh_auth_cmd_group }}"
        mode: "{{ opkssh_auth_cmd_mode }}"
        checksum: "sha256:{{ opkssh_sha256_expected }}"

###
# Verify that the opkssh config dir and files are present, if not it creates the default config files.
###

- name: Ensure that the opk configuration directory exists
  ansible.builtin.file:
    path: "{{ opkssh_config_dir }}"
    state: directory
    owner: root
    group: "{{ opkssh_auth_cmd_group }}"

- name: "Ensure that {{ opkssh_config_dir }}/auth_id exists and has correct permissions"
  ansible.builtin.file:
    path: "{{ opkssh_config_dir }}/auth_id"
    state: touch
    owner: root
    group: "{{ opkssh_auth_cmd_group }}"
    mode: 0640
  
- name: Check if {{ opkssh_config_dir }}/providers exists
  ansible.builtin.stat:
    path: "{{ opkssh_cmd }}"
    get_mime: false
    get_checksum: false
  register: opkssh_providers_exists_cmd
  
- name: Define opkssh_providers_exists
  ansible.builtin.set_fact:
    opkssh_providers_exists: "{{ opkssh_providers_exists_cmd.stat.exists }}"

- name: Ensure that {{ opkssh_config_dir }}/providers exists and has correct permissions
  ansible.builtin.file:
    path: "{{ opkssh_config_dir }}/providers"
    state: touch
    owner: root
    group: "{{ opkssh_auth_cmd_group }}"
    mode: 0640
  when: opkssh_providers_exists

- name: Make sure that the Google provider is correctly set in {{ opkssh_config_dir }}/providers
  ansible.builtin.lineinfile:
    path: "{{ opkssh_config_dir }}/providers"
    regexp: '^https:\/\/accounts.google.com\s.*$'
    line: "https://accounts.google.com 206584157355-7cbe4s640tvm7naoludob4ut1emii7sf.apps.googleusercontent.com {{ opkssh_providers_google_expiration }}"
    state: present
  when: opkssh_providers_google

- name: Make sure that the Google provider is correctly set in {{ opkssh_config_dir }}/providers
  ansible.builtin.lineinfile:
    path: "{{ opkssh_config_dir }}/providers"
    regexp: '^https:\/\/accounts.google.com\s.*$'
    state: absent
  when: not opkssh_providers_google

- name: Make sure that the Microsoft provider is correctly set in {{ opkssh_config_dir }}/providers
  ansible.builtin.lineinfile:
    path: "{{ opkssh_config_dir }}/providers"
    regexp: '^https:\/\/login.microsoftonline.com\s.*$'
    line: "https://login.microsoftonline.com/9188040d-6c67-4c5b-b112-36a304b66dad/v2.0 096ce0a3-5e72-4da8-9c86-12924b294a01 {{ opkssh_providers_microsoft_expiration }}"
    state: present
  when: opkssh_providers_microsoft

- name: Make sure that the Microsoft provider is correctly set in {{ opkssh_config_dir }}/providers
  ansible.builtin.lineinfile:
    path: "{{ opkssh_config_dir }}/providers"
    regexp: '^https:\/\/login.microsoftonline.com\/9188040d-6c67-4c5b-b112-36a304b66dad\/v2\.0\s.*$'
    state: absent
  when: not opkssh_providers_microsoft

- name: Make sure that the Gitlab provider is correctly set in {{ opkssh_config_dir }}/providers
  ansible.builtin.lineinfile:
    path: "{{ opkssh_config_dir }}/providers"
    regexp: '^https:\/\/gitlab.com\s.*$'
    line: "https://gitlab.com 8d8b7024572c7fd501f64374dec6bba37096783dfcd792b3988104be08cb6923 {{ opkssh_providers_microsoft_expiration }}"
    state: present
  when: opkssh_providers_gitlab

- name: Make sure that the Gitlab provider is correctly set in {{ opkssh_config_dir }}/providers
  ansible.builtin.lineinfile:
    path: "{{ opkssh_config_dir }}/providers"
    regexp: '^https:\/\/gitlab.com\s.*$'
    state: absent
  when: not opkssh_providers_gitlab